#----------------------------------------------------
#컬렉션 (리스트,튜플, 딕셔너리,집합)
'''
[리스트]
여러값을 순서 있게 저장할수 있는 자료구조
여러개의 데이터를 한 변수의 저장할 수 있는 자료형
데이터에는 인덱스로 접근
순서가 있는 자료형
크기 고정없이  다양한 타입을 혼합하여 저장 가능

[리스트 특징]
순서 유지
변경가능 : 리스트 생성 후 여러번 저장가능
다양한 자료형 저장 가능(정수,문자열,실수 등)
인덱싱,슬라이싱 기능
'''
#[리스트 생성방법]
a= [] #요소가 없는 빈리스트
my_list = [1,2,3,4] #정수
fruits = ["apple","banana","cherry"]
mixed=[1,"hello",3.14,True]#혼합
list2=[1,"A",[2,"B"]]#혼합 + 리스트 안에 또 다른 리스트

#minxed , list2의 경우 문법적으로 문제가 없지만 바람 직하지 않음.
#리스트를 사용하겠다 = 관련있는 자료끼리 묶겠다.
#서로 다른 자료형이 섞이면 좋지않음.



my_list1 =["철수","길동","몽룡"]
print("mylist1의 첫번쨰 요소는 :"+my_list1[0])
print("mylist1의 두번쨰 요소는 :"+my_list1[1])
print("mylist1의 세번쨰 요소는 :"+my_list1[2])

my_list_num = [1,2,3,4]
print("my_list_num의 첫번쨰 요소 :",my_list_num[0])
# 요소가 정수이기 떄문에 인덱스하면 정수
print()
print()
print()
print()
print()

my_list2=[1,"A",[2,"B"]]
print(my_list2[0])
print(my_list2[1])
print(my_list2[2])
print(my_list2[2][0])
print(my_list2[2][1])


a=[2,"2"]
print(a[0]*2)# 정수 형이기 떄문ㅇ[ 계산된 결과
print(a[1]*2)#문자 나열
b=[3,"3"]
c=a+b
print(c) #리스트 a와 리스트 b가합쳐져서 새로운 리스트가 생성됨.
print()
print()
print()

print()
print("리스트 수정하기 (변경,삭제)")

#문자열은 수정 안됨.
a=[1,2,3,4,5,6]
print("변경전 :",a)
a[3]=-1
print("변경후: ",a)
#연속된 범위의 값을 수정하기
#a[0:2]=0 #오류 발생
a[0:2]=[0]
print(" 연속된 범위의 값 변경후",a)

a[0:2] =[7,8,9]
print(" 연속된 범위의 값 변경후",a)
a[0] = a[1:2] #첫번쨰 요소에 리스트 1,2가 대입된다.


#값 지우기
print("현재 리스트 ",a)
a[0]=[]# 빈리스트를 사용하여 요소 삭제

print("변경됨 리스트, a")
del(a[0])
print("del함수 이용한 리스트",a)

#슬라이싱 이용해서 값 지우기
a[0:3]=[]
print("슬라이싱을 이용한 리스트",a)
print("슬라이싱을 이용한 리스트",a[0])


del(a) #변수 자체를 삭제하는법
print()



print()


print()


print()


print()


print()
#------------------------------
#리스트 관련 함수
#문법
'''
리스트 .함수()
'''
a=[1,2,3]

#appemd(value):리스트 가장뒤에 요소 추가
a.append(4)
print(a)
a.append(6)
a.append(5)
a.append(4)
print(a)



#정렬하기 sort()
b=[9,3,8,1,5]
print("정렬전",b)
b.sort()#오름차순 정렬이 기본이다.
print("정렬후: " ,b)
b.sort(reverse=True)#역순 정렬
print("정렬후: " ,b)
#정렬한 후 새로운 리스트 생성 sorted()
c=sorted(b)
print("b",b)
print('c',c)

#리스트 뒤집기 reverse()
d=[4,5,7,8,2]
d.reverse()#뒤집기
print("d",d)

#리스트에서 값을 찾고 그위피를 반환 index(value)
print("d리스트에서 7의 위치",d.index(7))
#찾는 값이 없으면 오류 생김

#지정한 위치에 값 삽입 insert(index,value)
d.insert(1,"약")
print("d리스트 :",d)



#리스트에서 처음 찾은 값 제거 remove(value)
d.append(8)
d.append(5)
d.append(2)

print("현재 d리스트 :",d)
d.remove(8)
print("변경된 d리스트 :",d)

#값의 갯수 변환 count(value)
d.count(2)
#없으면 0이 나온다
#pop(index) 리스트에서 index번쨰 값을 뽑아낸다.
#리스트 개념에서 중요함
#1. 값을 반환한다.(어떤 값인지 알려줌)
# 뽑아낸 값을 변수에 대입하거나 사용할 수 있음.

a=[1,2,3,1]
print("a.pop(1)=",a.pop(1))
print("현재 a리스트 : ",a)

print("a.pop()=",a.pop())
print("현재 a리스트 : ",a)

#안에 index번호를 지정안하고 pop함수를 사용할 경우 
#맨뒤에 있는 요소를 부터 반환됨.
print("현재 a 리스트:",a)

#리스트 복사하기 copy()
a=[1,2,3,4]
b=a.copy()
c=a


print("기존 a: ",a)
print("복사b:",b )
print("대입",c)

b[0]= -10
c[0] =-20


print("기존 a: ",a)
print("복사b:",b )
print("대입",c)
\


#clear() 리스트의 모든 요소 제거
a.clear()#리스트 자체가 삭제[ 된것이 아닌 요소만 제거
print("출력 a", a)


#list 의 요소들이 문자열로만 이루어진 경우 ,
#join() 함수 이용해서 하나의 문자열로 만들 수 있다.

my_list=["대","한","민","국"]
my_str = "".join(my_list)
print("출력 my_list:",my_list)



#------------x
#튜플 (Tuple)
'''
변경 불가능한
숫서있는 컬렉션
수정,삭제 불가
mytuple =(1,2,3)
소괄호 이용해서 생성하고
각 요소는 쉼표로 구분됨.
괄호 없이 쉼표만 있어도 튜플이 되긴함'''

my_tuple=(1,2,3)

'''
[리스트와의 차이점]
리스트는 값을 추가하거나 삭제 변경 할 수 있지만 
튜플은 만들고 나면 그 안의 값을 바꿀 수 없다.

[튜플의 특징]
1.불변성
2.속도 빠름
3.해시가능
4. 소괄호 or 쉼표로 생성
'''
my_tuple=(1,2,3)
my_tuple2=1,2,3
#데이터가 한개만 있는 튜플
t1=(1,)#반드시 쉼표를 붙여야함
t2=2, #이것도 튜플

a=()#빈튜플
b=(1,)#요소가 1개인 튜플, 쉼표 필수
c=(1,2,3,"a","B")#혼합
d=1,2,3,4 #소괄호 생략기능
e=(1,"A",(2,"B"))
print()
print()
print()

print()
print()
print()
print(a)
print(b)
print(c)
print(d)
print(e)

#인덱싱 ,슬라이싱기능
print(d[0])
print(d[0:2])

#d[0]= -1 #튜플 요소 변경 불가하다
a=(1,2,3,4)
b=(5,6,7,8)
print(a+b)#연결
print(a*2)



#-----------------
#딕셔너리

'''
키(key)와 깂(value) 쌍으로 데이터를 저장하는 자료형이다.
어떤 항목을 이름표를 붙여서 저장하는 방식
'''
student = {"이름":"홍길동","나이":20,"성적":95}
"""
key = 이름,나이,이름
value = 홍길동,20,95"""
"""
[특징]
1.key값은 중복안됨.
같은 키를 여러번 사용하면 마지막만 남아있음.

d={"a":1,"a":2}
결과적으로 a라는 key값이 가지는 값은 2다.

2.값은 중복가능하다.

3.키는 변경할 수 없는 자료형만 가능하다.
    가능:문자열,숫자,튜플
    불가능: 리스트,딕셔너리

4.파이썬 3.7이상부터 입력한 순서대로 요소가 저장되고 출력
5.딕셔너리 순서가 없고 key를 가지고 인덱싱한다.
6.값 추가,삭제, 수정가능"""

#------------------------------------------
"""
딕셔너리 생성 방법
방법1: 중괄호 사용{}
person = {"이름":"유자","나이":37}



방법2 : dict() 생성자 사용
person = dict(이름="윤지").("나이",36)

방법3 : 이스트나 튜플 안에 (key, value) 쌍 넣기
person = dict([("이름":"윤지")]).("나이":37)

방법4 : 빈 딕셔너리 만들고 나중에 추가
person = {}
person["이름"] = "윤지" 
person["나이"] = 37
[딕셔너리 자주 사용하는 메서드]
keys() -> 키만 가져오기
values() -> 값들만 가져오기
items() -> 키-값 쌍 가져오기
get("키") -> 키에 해당하는 값 가져오기
        ->키가 없으면 None 반환
in 연산자 -> 키가 있는지 확인
"""

#딕셔너리 만들기
my_dict = {"축구":"soccer",2022:"한일",(1, 2):("원","투"),"16강":[2022,2010]}
print(my_dict)
print(my_dict["축구"])
print(my_dict["16강"])
print(my_dict["16강"])
print(my_dict[(1,2)][0])


#값 추가하기
my_dict = {1:"a"}

print(my_dict)
my_dict[3]="c"# key 3, value = "c" 
            #키가 존재 하지 않으면 새로운 요소 자동으로 추가

print(my_dict)
my_dict[3]="변경" #value변경
print(my_dict)


del(my_dict[3]) #삭제, 삭제하고 싶은 key값만 입력
print(my_dict)
#value만 삭제 불가능
#key는 그대로 남고 None으로 바꾸거나,
#빈값 = "",[],{} 등으로 대체


#------------------------------------------------
#[set 정의]
'''
집합 자료형, 수학의 집합과 동일하다
중복이 없고, 순서가 없는 테이블드르이 묶음

[set의 특징]
1. 중복안됨
똑같은 값이 들어가면 자동으로 하나만 남음
2. 순서가 없음 : 인덱싱기능
3. 수정 불가능 / 추가, 삭제는 가능
4.다양한 집합 연산 가능
합집합(|), 교집합(&),차집합(-) 같은 연산 가능
'''

a= {1,2,3}
b={3,4,5}
print(a|b)#합집합
print(a&b)# 교집합
print(a-b)# 차집합

#set() 생성 방법
'''
1. 중괄호 {}로 만들기
2. set() 함수로 만들기
리스트나 문자열을  set으로 변환 가능
s1=set([1,2,3,4,4,4]) # 중복 제거된 집합생성
                    #-> [{1,2,3,4}]
s2=set("hello") #중복 제거된 문자 집합
s2 = set("hello") #-> {'h','e','l','o'}
'''


print()
print()

print();print()




#값 추가/ 삭제 방법
s={1,2}
s.add(3) #add 함수 이용해서 값 추가
print("집합값 추가 : ", s)

s.discard(4) # 값 삭제 (없는 값을 삭제해도 에러 없음)

#값이 있는지 없는지 확신이 없거나 꼭 삭제가 안돼도 괞찬다면
#discard()사용
#값이 반드시 존재해야 하는 상황이면 remove() 사용

my_set={12,3,4,1,1,1,2,2,3,3,3,3,4,6,6,6,5,4,3,2,1}
print(my_set)
my_set2={1,2,3,4,2,2,1,"A","A","B","B"}
print(my_set2)
print()
print()